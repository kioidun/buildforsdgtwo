{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","setState","population","target","value","handleChange2","timeToElapse","handleChange3","reportedCases","handleChange4","totalHospitalBeds","handleSelectChange","periodType","handleSubmit","preventDefault","state","alert","impact","severeImpact","class","id","onSubmit","this","for","type","onChange","placeholder","name","disabled","hidden","selected","data","input","impactTotal","severeImpactTotal","timetoElapse","hospitalbeds","averageDailyIncome","region","avgDailyIncomeInUSD","averageDailyIncomePopulation","avgDailyIncomePopulation","currentlyInfectedImpact","Math","trunc","currentlyInfectedSevere","severeCasesByRequestedTimeImpact","numberofhospitalbeds","hospitalBedsByRequestedTimeImpact","casesForICUByRequestedTimeImpact","casesForVentilatorsByRequestedTimeImpact","severeCasesByRequestedTimeSevere","hospitalBedsByRequestedTimeSevere","casesForICUByRequestedTimeSevere","casesForVentilatorsByRequestedTimeSevere","dollarsInFlightImpact","dollarsInFlightSevere","currentlyInfected","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","displayData","data_population","data_time_to_elapse","data_reported_cases","data_total_hospital_beds","data_period_type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d59cb5f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n        population:'',\n        timeToElapse:'',\n        reportedCases:'',\n        totalHospitalBeds: '',\n        periodType:'days'\n    }\n}\n\n\nhandleChange = (event) => {\n    this.setState({\n        population: event.target.value,\n    })\n}\nhandleChange2 = (event) => {\n    this.setState({\n        timeToElapse:event.target.value,\n    })\n}\nhandleChange3 = (event) => {\n    this.setState({\n        reportedCases: event.target.value,\n    })\n}\nhandleChange4 = (event) => {\n    this.setState({\n        totalHospitalBeds:event.target.value\n    })\n}\nhandleSelectChange = (event) => {\n    this.setState({\n        periodType:event.target.value\n    })\n}\nhandleSubmit = (event) =>{\n    event.preventDefault();\n    const data = this.state;\n    //console.log(data)\n    alert(`${this.state.population} ${this.state.timeToElapse} ${this.state.reportedCases} ${this.state.totalHospitalBeds} ${this.state.periodType}`)\n}\n\nrender(){\n    const impact = {};\n    const severeImpact = {};\n    const displayData = (input) => {\n        const impactTotal = input.reportedCases * 10;\n        const severeImpactTotal = input.reportedCases * 50;\n        let timetoElapse = input.timeToElapse;\n        const hospitalbeds = input.totalHospitalBeds;\n        const averageDailyIncome = input.region.avgDailyIncomeInUSD;\n        const averageDailyIncomePopulation = input.region.avgDailyIncomePopulation;\n      \n        if (input.periodType === 'months') {\n          timetoElapse = input.timeToElapse * 30;\n        } else if (input.periodType === 'weeks') {\n          timetoElapse = input.timeToElapse * 7;\n        }\n        const currentlyInfectedImpact = impactTotal * (2 ** Math.trunc(timetoElapse / 3));\n        const currentlyInfectedSevere = severeImpactTotal * (2 ** Math.trunc(timetoElapse / 3));\n        const severeCasesByRequestedTimeImpact = (15 / 100) * currentlyInfectedImpact;\n        const numberofhospitalbeds = Math.trunc(hospitalbeds * (35 / 100));\n        const hospitalBedsByRequestedTimeImpact = numberofhospitalbeds\n        - (severeCasesByRequestedTimeImpact - 1);\n        const casesForICUByRequestedTimeImpact = Math.trunc((5 / 100) * currentlyInfectedImpact);\n        const casesForVentilatorsByRequestedTimeImpact = Math.trunc((2 / 100) * currentlyInfectedImpact);\n        const severeCasesByRequestedTimeSevere = (15 / 100) * currentlyInfectedSevere;\n        const hospitalBedsByRequestedTimeSevere = numberofhospitalbeds\n        - (severeCasesByRequestedTimeSevere - 1);\n        const casesForICUByRequestedTimeSevere = Math.trunc((5 / 100) * currentlyInfectedSevere);\n        const casesForVentilatorsByRequestedTimeSevere = Math.trunc((2 / 100) * currentlyInfectedSevere);\n        const dollarsInFlightImpact = Math.trunc((currentlyInfectedImpact\n          * averageDailyIncomePopulation * averageDailyIncome) / timetoElapse);\n        const dollarsInFlightSevere = Math.trunc((currentlyInfectedSevere\n          * averageDailyIncomePopulation * averageDailyIncome) / timetoElapse);\n      \n        impact.currentlyInfected = impactTotal;\n        impact.infectionsByRequestedTime = currentlyInfectedImpact;\n        impact.severeCasesByRequestedTime = severeCasesByRequestedTimeImpact;\n        impact.hospitalBedsByRequestedTime = hospitalBedsByRequestedTimeImpact;\n        impact.casesForICUByRequestedTime = casesForICUByRequestedTimeImpact;\n        impact.casesForVentilatorsByRequestedTime = casesForVentilatorsByRequestedTimeImpact;\n        impact.dollarsInFlight = dollarsInFlightImpact;\n        severeImpact.currentlyInfected = severeImpactTotal;\n        severeImpact.infectionsByRequestedTime = currentlyInfectedSevere;\n        severeImpact.severeCasesByRequestedTime = severeCasesByRequestedTimeSevere;\n        severeImpact.hospitalBedsByRequestedTime = hospitalBedsByRequestedTimeSevere;\n        severeImpact.casesForICUByRequestedTime = casesForICUByRequestedTimeSevere;\n        severeImpact.casesForVentilatorsByRequestedTime = casesForVentilatorsByRequestedTimeSevere;\n        severeImpact.dollarsInFlight = dollarsInFlightSevere;\n      };\n      const covid19ImpactEstimator = (data) => {\n          data = [{\n            data_population: this.state.reportedCases,\n            data_time_to_elapse: this.state.timetoElapse,\n            data_reported_cases: this.state.reportedCases,\n            data_total_hospital_beds: this.state.totalHospitalBeds,\n            data_period_type: this.state.periodType\n          }]\n        // data = calculateDataInput(2747, 38, 'days', 678874, 4, 0.73);\n        displayData(data);\n        const result = { data, impact, severeImpact };\n        return result;\n      };\n  return (\n    <div class =\"container\">\n        <section id=\"formLoading\">\n        <h1>COVID-19 Health Simulator</h1>\n            <h2>Fill in the form</h2>\n            <form class='formtwo' id=\"form\" onSubmit={this.handleSubmit} >\n            <div class = \"form-control\">\n                <label for=\"population\">Population</label>\n                <input type=\"text\" id=\"population\" value= {this.state.population} onChange={this.handleChange} placeholder=\"data-population\" />\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"timeToElapse\">Time To Elapse</label>\n                <input type=\"text\" id=\"timeToElapse\" value = {this.state.timeToElapse} onChange={this.handleChange2} placeholder=\"data-time-to-elapse\" />\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"reportedCases\">Reported Cases</label>\n                <input type=\"text\" id=\"reportedCases\" value = {this.state.reportedCases} onChange={this.handleChange3} placeholder=\"data-reported-cases\"/ >\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"totalHospitalBeds\">Total Hospital Beds</label>\n                <input type=\"text\" id=\"totalHospitalBeds\" value= {this.state.totalHospitalBeds} onChange={this.handleChange4}placeholder=\"data-total-hospital-beds\"/ >\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"periodType\">Period Type</label>\n                <select id=\"periodType\" value= {this.state.periodType} onChange={this.handleSelectChange} name=\"data-period-type\">\n                    <option disabled hidden selected>Select</option>\n                  <option value=\"days\">days</option>\n                  <option value=\"weeks\">weeks</option>\n                  <option value=\"months\">months</option>\n                </select>\n            </div>\n            <button type= \"submit\">data-go-submit</button>\n           \n            <div class = \"form-control\">\n            <label for=\"data-result\">data-result</label>\n            <input type='text' id=\"data-result\" value= {covid19ImpactEstimator}/>\n            </div>\n         </form>   \n         </section>       \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}