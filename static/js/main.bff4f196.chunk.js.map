{"version":3,"sources":["logo.svg","component/form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","handleChange","event","setState","population","target","value","handleChange2","timeToElapse","handleChange3","reportedCases","handleChange4","totalHospitalBeds","handleSelectChange","periodType","handleSubmit","preventDefault","state","alert","impact","severeImpact","console","log","this","class","id","onSubmit","for","type","onChange","placeholder","name","disabled","hidden","selected","data","input","impactTotal","severeImpactTotal","timetoElapse","hospitalbeds","averageDailyIncome","region","avgDailyIncomeInUSD","averageDailyIncomePopulation","avgDailyIncomePopulation","currentlyInfectedImpact","Math","trunc","currentlyInfectedSevere","severeCasesByRequestedTimeImpact","numberofhospitalbeds","hospitalBedsByRequestedTimeImpact","casesForICUByRequestedTimeImpact","casesForVentilatorsByRequestedTimeImpact","severeCasesByRequestedTimeSevere","hospitalBedsByRequestedTimeSevere","casesForICUByRequestedTimeSevere","casesForVentilatorsByRequestedTimeSevere","dollarsInFlightImpact","dollarsInFlightSevere","currentlyInfected","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","displayData","data_population","data_time_to_elapse","data_reported_cases","data_total_hospital_beds","data_period_type","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,0IC8J5BC,E,kDA3JX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAWVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,WAAYF,EAAMG,OAAOC,SAdf,EAiBlBC,cAAgB,SAACL,GACb,EAAKC,SAAS,CACVK,aAAaN,EAAMG,OAAOC,SAnBhB,EAsBlBG,cAAgB,SAACP,GACb,EAAKC,SAAS,CACVO,cAAeR,EAAMG,OAAOC,SAxBlB,EA2BlBK,cAAgB,SAACT,GACb,EAAKC,SAAS,CACVS,kBAAkBV,EAAMG,OAAOC,SA7BrB,EAgClBO,mBAAqB,SAACX,GAClB,EAAKC,SAAS,CACVW,WAAWZ,EAAMG,OAAOC,SAlCd,EAqClBS,aAAe,SAACb,GACZA,EAAMc,iBACO,EAAKC,MAElBC,MAAM,GAAD,OAAI,EAAKD,MAAMb,WAAf,YAA6B,EAAKa,MAAMT,aAAxC,YAAwD,EAAKS,MAAMP,cAAnE,YAAoF,EAAKO,MAAML,kBAA/F,YAAoH,EAAKK,MAAMH,cAvCpI,EAAKG,MAAQ,CACTb,WAAW,GACXI,aAAa,GACbE,cAAc,GACdE,kBAAmB,GACnBE,WAAW,QAPD,E,qDA4CT,IAAD,OACEK,EAAS,GACTC,EAAe,GA6DrB,OADAC,QAAQC,IAAIC,KAAKN,MAAMb,YAEnB,0BAAMoB,MAAM,OAAOC,GAAG,OAAOC,SAAUH,KAAKR,cAC5C,yBAAKS,MAAQ,gBACT,2BAAOG,IAAI,mBAAX,mBACA,2BAAOC,KAAK,OAAOH,GAAG,kBAAkBnB,MAAQiB,KAAKN,MAAMb,WAAYyB,SAAUN,KAAKtB,aAAc6B,YAAY,oBAChH,uBAAGN,MAAM,wBACT,uBAAGA,MAAM,8BACT,iDAEJ,yBAAKA,MAAQ,gBACT,2BAAOG,IAAI,uBAAX,uBACA,2BAAOC,KAAK,OAAOH,GAAG,sBAAsBnB,MAASiB,KAAKN,MAAMT,aAAcqB,SAAUN,KAAKhB,cAAeuB,YAAY,wBACxH,uBAAGN,MAAM,wBACT,uBAAGA,MAAM,8BACT,iDAEJ,yBAAKA,MAAQ,gBACT,2BAAOG,IAAI,uBAAX,uBACA,2BAAOC,KAAK,OAAOH,GAAG,sBAAsBnB,MAASiB,KAAKN,MAAMP,cAAemB,SAAUN,KAAKd,cAAeqB,YAAY,wBACzH,uBAAGN,MAAM,wBACT,uBAAGA,MAAM,8BACT,iDAEJ,yBAAKA,MAAQ,gBACT,2BAAOG,IAAI,4BAAX,4BACA,2BAAOC,KAAK,OAAOH,GAAG,2BAA2BnB,MAAQiB,KAAKN,MAAML,kBAAmBiB,SAAUN,KAAKZ,cAAcmB,YAAY,6BAChI,uBAAGN,MAAM,wBACT,uBAAGA,MAAM,8BACT,iDAEJ,yBAAKA,MAAQ,gBACT,2BAAOG,IAAI,oBAAX,oBACA,4BAAQF,GAAG,mBAAmBnB,MAAQiB,KAAKN,MAAMH,WAAYe,SAAUN,KAAKV,mBAAoBkB,KAAK,oBACjG,4BAAQC,UAAQ,EAACC,QAAM,EAACC,UAAQ,GAAhC,UACF,4BAAQ5B,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,YAGN,2BAAOsB,KAAK,QAAQH,GAAG,eAAenB,MAAM,UAC5C,4BAAQsB,KAAM,UAAd,kBACA,2BAAOA,KAAK,OAAOtB,MAvDU,SAAC6B,GAW9B,OAzDgB,SAACC,GACjB,IAAMC,EAAoC,GAAtBD,EAAM1B,cACpB4B,EAA0C,GAAtBF,EAAM1B,cAC5B6B,EAAeH,EAAM5B,aACnBgC,EAAeJ,EAAMxB,kBACrB6B,EAAqBL,EAAMM,OAAOC,oBAClCC,EAA+BR,EAAMM,OAAOG,yBAEzB,WAArBT,EAAMtB,WACRyB,EAAoC,GAArBH,EAAM5B,aACS,UAArB4B,EAAMtB,aACfyB,EAAoC,EAArBH,EAAM5B,cAEvB,IAAMsC,EAA0BT,EAAW,SAAI,EAAKU,KAAKC,MAAMT,EAAe,IACxEU,EAA0BX,EAAiB,SAAI,EAAKS,KAAKC,MAAMT,EAAe,IAC9EW,EAAoC,IAAYJ,EAChDK,EAAuBJ,KAAKC,MAAkB,IAAZR,GAClCY,EAAoCD,GACvCD,EAAmC,GAChCG,EAAmCN,KAAKC,MAAO,IAAWF,GAC1DQ,EAA2CP,KAAKC,MAAO,IAAWF,GAClES,EAAoC,IAAYN,EAChDO,EAAoCL,GACvCI,EAAmC,GAChCE,EAAmCV,KAAKC,MAAO,IAAWC,GAC1DS,EAA2CX,KAAKC,MAAO,IAAWC,GAClEU,EAAwBZ,KAAKC,MAAOF,EACtCF,EAA+BH,EAAsBF,GACnDqB,EAAwBb,KAAKC,MAAOC,EACtCL,EAA+BH,EAAsBF,GAEzDpB,EAAO0C,kBAAoBxB,EAC3BlB,EAAO2C,0BAA4BhB,EACnC3B,EAAO4C,2BAA6Bb,EACpC/B,EAAO6C,4BAA8BZ,EACrCjC,EAAO8C,2BAA6BZ,EACpClC,EAAO+C,mCAAqCZ,EAC5CnC,EAAOgD,gBAAkBR,EACzBvC,EAAayC,kBAAoBvB,EACjClB,EAAa0C,0BAA4Bb,EACzC7B,EAAa2C,2BAA6BR,EAC1CnC,EAAa4C,4BAA8BR,EAC3CpC,EAAa6C,2BAA6BR,EAC1CrC,EAAa8C,mCAAqCR,EAClDtC,EAAa+C,gBAAkBP,EAW/BQ,CAREjC,EAAO,CAAC,CACNkC,gBAAiB,EAAKpD,MAAMP,cAC5B4D,oBAAqB,EAAKrD,MAAMsB,aAChCgC,oBAAqB,EAAKtD,MAAMP,cAChC8D,yBAA0B,EAAKvD,MAAML,kBACrC6D,iBAAkB,EAAKxD,MAAMH,cAIlB,CAAEqB,OAAMhB,SAAQC,wB,GAxGxBsD,aCwBJC,MArBf,WACE,OACE,yBAAKnD,MAAO,aACR,yBAAKA,MAAQ,UACT,4BACI,4BAAI,uBAAGoD,KAAK,SAAR,SACJ,4BAAI,uBAAGA,KAAK,SAAR,WAGZ,6BAASnD,GAAG,QACR,yDACA,6CAEJ,6BAASA,GAAG,QACR,gDACC,kBAAC,EAAD,SCROoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzE,QAAQyE,MAAMA,EAAMC,c","file":"static/js/main.bff4f196.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import  React, {Component} from 'react';\n\nclass Form extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            population:'',\n            timeToElapse:'',\n            reportedCases:'',\n            totalHospitalBeds: '',\n            periodType:'days'\n        }\n    }\n    \n\n    handleChange = (event) => {\n        this.setState({\n            population: event.target.value,\n        })\n    }\n    handleChange2 = (event) => {\n        this.setState({\n            timeToElapse:event.target.value,\n        })\n    }\n    handleChange3 = (event) => {\n        this.setState({\n            reportedCases: event.target.value,\n        })\n    }\n    handleChange4 = (event) => {\n        this.setState({\n            totalHospitalBeds:event.target.value\n        })\n    }\n    handleSelectChange = (event) => {\n        this.setState({\n            periodType:event.target.value\n        })\n    }\n    handleSubmit = (event) =>{\n        event.preventDefault();\n        const data = this.state;\n        //console.log(data)\n        alert(`${this.state.population} ${this.state.timeToElapse} ${this.state.reportedCases} ${this.state.totalHospitalBeds} ${this.state.periodType}`)\n    }\n    \n    render(){\n        const impact = {};\n        const severeImpact = {};\n        const displayData = (input) => {\n            const impactTotal = input.reportedCases * 10;\n            const severeImpactTotal = input.reportedCases * 50;\n            let timetoElapse = input.timeToElapse;\n            const hospitalbeds = input.totalHospitalBeds;\n            const averageDailyIncome = input.region.avgDailyIncomeInUSD;\n            const averageDailyIncomePopulation = input.region.avgDailyIncomePopulation;\n          \n            if (input.periodType === 'months') {\n              timetoElapse = input.timeToElapse * 30;\n            } else if (input.periodType === 'weeks') {\n              timetoElapse = input.timeToElapse * 7;\n            }\n            const currentlyInfectedImpact = impactTotal * (2 ** Math.trunc(timetoElapse / 3));\n            const currentlyInfectedSevere = severeImpactTotal * (2 ** Math.trunc(timetoElapse / 3));\n            const severeCasesByRequestedTimeImpact = (15 / 100) * currentlyInfectedImpact;\n            const numberofhospitalbeds = Math.trunc(hospitalbeds * (35 / 100));\n            const hospitalBedsByRequestedTimeImpact = numberofhospitalbeds\n            - (severeCasesByRequestedTimeImpact - 1);\n            const casesForICUByRequestedTimeImpact = Math.trunc((5 / 100) * currentlyInfectedImpact);\n            const casesForVentilatorsByRequestedTimeImpact = Math.trunc((2 / 100) * currentlyInfectedImpact);\n            const severeCasesByRequestedTimeSevere = (15 / 100) * currentlyInfectedSevere;\n            const hospitalBedsByRequestedTimeSevere = numberofhospitalbeds\n            - (severeCasesByRequestedTimeSevere - 1);\n            const casesForICUByRequestedTimeSevere = Math.trunc((5 / 100) * currentlyInfectedSevere);\n            const casesForVentilatorsByRequestedTimeSevere = Math.trunc((2 / 100) * currentlyInfectedSevere);\n            const dollarsInFlightImpact = Math.trunc((currentlyInfectedImpact\n              * averageDailyIncomePopulation * averageDailyIncome) / timetoElapse);\n            const dollarsInFlightSevere = Math.trunc((currentlyInfectedSevere\n              * averageDailyIncomePopulation * averageDailyIncome) / timetoElapse);\n          \n            impact.currentlyInfected = impactTotal;\n            impact.infectionsByRequestedTime = currentlyInfectedImpact;\n            impact.severeCasesByRequestedTime = severeCasesByRequestedTimeImpact;\n            impact.hospitalBedsByRequestedTime = hospitalBedsByRequestedTimeImpact;\n            impact.casesForICUByRequestedTime = casesForICUByRequestedTimeImpact;\n            impact.casesForVentilatorsByRequestedTime = casesForVentilatorsByRequestedTimeImpact;\n            impact.dollarsInFlight = dollarsInFlightImpact;\n            severeImpact.currentlyInfected = severeImpactTotal;\n            severeImpact.infectionsByRequestedTime = currentlyInfectedSevere;\n            severeImpact.severeCasesByRequestedTime = severeCasesByRequestedTimeSevere;\n            severeImpact.hospitalBedsByRequestedTime = hospitalBedsByRequestedTimeSevere;\n            severeImpact.casesForICUByRequestedTime = casesForICUByRequestedTimeSevere;\n            severeImpact.casesForVentilatorsByRequestedTime = casesForVentilatorsByRequestedTimeSevere;\n            severeImpact.dollarsInFlight = dollarsInFlightSevere;\n          };\n          const covid19ImpactEstimator = (data) => {\n              data = [{\n                data_population: this.state.reportedCases,\n                data_time_to_elapse: this.state.timetoElapse,\n                data_reported_cases: this.state.reportedCases,\n                data_total_hospital_beds: this.state.totalHospitalBeds,\n                data_period_type: this.state.periodType\n              }]\n            // data = calculateDataInput(2747, 38, 'days', 678874, 4, 0.73);\n            displayData(data);\n            const result = { data, impact, severeImpact };\n            return result;\n          };\n        console.log(this.state.population);\n        return(\n            <form class='form' id=\"form\" onSubmit={this.handleSubmit} >\n            <div class = \"form-control\">\n                <label for=\"data-population\">data-population</label>\n                <input type=\"text\" id=\"data-population\" value= {this.state.population} onChange={this.handleChange} placeholder=\"data-population\" />\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"data-time-to-elapse\">data-time-to-elapse</label>\n                <input type=\"text\" id=\"data-time-to-elapse\" value = {this.state.timeToElapse} onChange={this.handleChange2} placeholder=\"data-time-to-elapse\" />\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"data-reported-cases\">data-reported-cases</label>\n                <input type=\"text\" id=\"data-reported-cases\" value = {this.state.reportedCases} onChange={this.handleChange3} placeholder=\"data-reported-cases\"/ >\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"data-total-hospital-beds\">data-total-hospital-beds</label>\n                <input type=\"text\" id=\"data-total-hospital-beds\" value= {this.state.totalHospitalBeds} onChange={this.handleChange4}placeholder=\"data-total-hospital-beds\"/ >\n                <i class=\"fas fa-check-circle\"></i>\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <small>Error message</small>\n            </div>\n            <div class = \"form-control\">\n                <label for=\"data-period-type\">data-period-type</label>\n                <select id=\"data-period-type\" value= {this.state.periodType} onChange={this.handleSelectChange} name=\"data-period-type\">\n                    <option disabled hidden selected>Select</option>\n                  <option value=\"days\">days</option>\n                  <option value=\"weeks\">weeks</option>\n                  <option value=\"months\">months</option>\n                </select>\n            </div>\n            <input type=\"reset\" id=\"button-reset\" value=\"reset\"/>\n            <button type= \"submit\">data-go-submit</button>\n            <input type='text' value= {covid19ImpactEstimator}/>\n         </form>   \n        \n        )\n        \n    }\n}\nexport default Form;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Forms from './component/form';\n\nfunction App() {\n  return (\n    <div class =\"container\">\n        <nav class = \"navbar\">\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#form\">Form</a></li>\n            </ul>\n        </nav>\n        <section id=\"home\">\n            <h1>COVID-19 Health Simulator</h1>\n            <p>Build for SDG</p>\n        </section>\n        <section id=\"form\">\n            <h1>Fill in the form</h1>\n             <Forms />\n         </section>       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}